// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'base'
buildscript {
    ext {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        ele = true
        ele = "true" == properties.getProperty("ele")

        if (!ele) {
            bintrayUser = properties.getProperty('bintrayUser')
            bintrayKey = properties.getProperty('bintrayKey')
        }
        lancet_group = 'me.ele'
        lancet_version = '1.0.7'
        //lancet_version = '0.0.1.8-SNAPSHOT'

        asm_version = '9.1'
        //android_tools_version = '2.4.0-alpha6'
//        android_tools_version = '7.3.0'
        android_tools_version = '4.1.2'
        guava_version = '26.0-jre'
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        mavenCentral()
        maven {
            if (ele) {
                url "http://maven.dev.elenet.me/nexus/content/groups/public"
            } else {
                url "https://dl.bintray.com/eleme-mt-arch/maven"
            }
        }
    }
    dependencies {
        if (ele) {
            classpath 'me.ele:eradle:1.7.0'
        } else {
            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        }
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        mavenCentral()
    }
}

subprojects { pro ->

    repositories {
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        mavenCentral()
        maven {
            url 'https://maven.google.com'
        }
    }

    if (pro.name == 'sample-test') return

    version = lancet_version
    group = lancet_group

    if (ele) {
        apply plugin: 'eradle'
        modifyPom {
            project {
                groupId lancet_group
                artifactId pro.name
                version lancet_version
                packaging 'jar'
            }
        }
        extraArchive {
            sources = true
        }
    } else {
        apply plugin: 'maven-publish'
        afterEvaluate {
            publishing {
                publications {
                    release(MavenPublication) {
                        groupId lancet_group
                        artifactId pro.name
                        version lancet_version
                        from components.java
                    }
                }
                repositories {
                    maven {
                        url = file("${project.rootDir}/repos")
                    }
                }
            }
        }
    }

}

task uploadAll { task ->

    task.group = 'upload'
    gradle.projectsEvaluated {
        task.dependsOn project.tasks.clean
        task.dependsOn project.tasks.build

        project.tasks.build.mustRunAfter project.tasks.clean

        project.subprojects {
            if (it.name != 'sample-test') {
                Task upload = !ele ? it.tasks.publish : it.tasks.uploadArchives;
                task.dependsOn upload
                upload.mustRunAfter project.tasks.build
            }
        }
    }
}
